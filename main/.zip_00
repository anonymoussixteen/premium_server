/<?php

error_reporting(0);
unlink('.img');
$file = 'cookie.txt';if (file_exists($file)) {unlink($file);}

$red    = "\033[1;31;40m";
$green  = "\033[1;32;40m";
$yellow = "\033[1;33;40m";
$blue   = "\033[1;34;40m";
$purple = "\033[1;35;40m";
$cyan   = "\033[1;36;40m";
$white  = "\033[1;37;40m";
$red    = "\033[1;31;40m";
$grey   = "\033[1;30;40m";
$mono   = "\033[2;37;40m";
$emono  = "\033[0;37;40m";
$italic = "\033[3;37;40m";
$etalic = "\033[0;37;40m";
$reset  = $white;
$host   = "earnbitmoon.club";
date_default_timezone_set('Africa/Harare');

class KeyboardInterrupt extends Exception {}
sleep(2);

function curl($url, $post = 0, $httpheader = 0, $proxy = 0){ // url, postdata, http headers, proxy, uagent
 while (true){
   $ch = curl_init();
   curl_setopt($ch, CURLOPT_URL, $url);
   curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
   curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
   curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
   curl_setopt($ch, CURLOPT_DNS_SERVERS, "1.1.1.1");
   curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
   curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);
   curl_setopt($ch, CURLOPT_TIMEOUT, 60);
   curl_setopt($ch, CURLOPT_SSLVERSION, CURL_SSLVERSION_TLSv1_3);
   curl_setopt($ch, CURLOPT_SSL_CIPHER_LIST, 'TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256');
   curl_setopt($ch, CURLOPT_COOKIE,TRUE);
   curl_setopt($ch, CURLOPT_COOKIEFILE,"cookie.txt");
   curl_setopt($ch, CURLOPT_COOKIEJAR,"cookie.txt");
   if($post){
      curl_setopt($ch, CURLOPT_POST, true);
      curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
    }
    if($httpheader){
      curl_setopt($ch, CURLOPT_HTTPHEADER, $httpheader);
    }
    if($proxy){
      curl_setopt($ch, CURLOPT_HTTPPROXYTUNNEL, true);
      curl_setopt($ch, CURLOPT_PROXY, $proxy);
      // curl_setopt($ch, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5);
    }
    curl_setopt($ch, CURLOPT_HEADER, true);
    $response = curl_exec($ch);
    $httpcode = curl_getinfo($ch);
    if(!$httpcode) return "Curl Error : ".curl_error($ch); else{
     $header = substr($response, 0, curl_getinfo($ch, CURLINFO_HEADER_SIZE));
     $body = substr($response, curl_getinfo($ch, CURLINFO_HEADER_SIZE));
     curl_close($ch);
     if ($header == "") {
          echo "\rPlease Check Your Connection \r"; continue;} else { echo "                             \r";
          return array($header, $body);}
    }
  }}

function countdown($t) {
    while ($t > 0) {
        $mins = floor($t / 60);
        $secs = $t % 60;
        $timer = sprintf('%02dm:%02ds', $mins, $secs);
        $now = date('H:i:s'); //'H:i:s'
        echo "\r                     ⫍     $timer    ⫎\r";
        usleep(1000000);
        $t--;
    }
}

function Slow($msg)
         {$slow = str_split($msg);
          foreach( $slow as $slowmo )
                   {echo $slowmo;
                    usleep(555);}
         }
function Slo($msg)
         {$slow = str_split($msg);
          foreach( $slow as $slowmo )
                   {echo $slowmo;
                    usleep(555);}
         }

function Sav($namadata){
         if(file_exists($namadata)){
            $data = file_get_contents($namadata);
            }else{
                   usleep(1.5);
                   //system("clear");
            $data = readline("  ".$namadata." :  ");
            file_put_contents($namadata,$data);
                 }
            return $data;
                 }

function Save($namadata)
   {
         if(file_exists($namadata)){
            $data = file_get_contents($namadata);
        }else{
            $data = readline("  ".$namadata." :  ");
            file_put_contents($namadata,$data);
             }
         return $data;
   }

function timer($timer){
      $tim = time()+$timer;
      while(true):
        echo "\r                          \r";$wsl=$wrn[$i];
        $tm = $tim-time();
        $date=date("i:s",$tm);
        if($tm<1){
          break;
        }
      endwhile;
    }

function load($data, $file)
         {
           $handle = fopen($file, 'w');fwrite($handle, $data);
           fclose($handle);
         }


function cookie(){
         $cookie=Sav("Cookie");
         return $cookie;}

function user_agent(){
         $user=Sav("User-agent");
         return $user;}

system("clear");
$user= user_agent();
system("clear");
$cookie=cookie();
system("clear");


function captchasolver($captcha, $cookie)
         { global $user, $cookie;
          $header0 = [
               "Host: earnbitmoon.club",
               "x-requested-with:XMLHttpRequest",
               "content-type: multipart/form-data; boundary=------WebKitFormBoundaryPvNIrj9zw1N1kh5O",
               "origin: https://earnbitmoon.club",
               "user-agent: $user",
               "accept: */*", //*/
               "referer: https://earnbitmoon.club/",
               "cookie: $cookie",
                        ];

          $header1 = [
               "Host: earnbitmoon.club",
               "content-type: multipart/form-data; boundary=----WebKitFormBoundaryPXIjpA5uCgwszbBB",
               "x-requested-with:XMLHttpRequest",
               "origin: https://earnbitmoon.club",
               "user-agent: $user",
               "accept: */*", //*/
               "referer: https://earnbitmoon.club/",
               "cookie: $cookie",
                         ];

          $header2 = [
               "Host: earnbitmoon.club",
               "user-agent: $user",
               "accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8",
               "referer: https://earnbitmoon.club/",
               "cookie: $cookie",
                        ];

          $url = "https://earnbitmoon.club/system/libs/captcha/request.php";
          $payload = '------WebKitFormBoundaryPXIjpA5uCgwszbBB
Content-Disposition: form-data; name="payload"


eyJpIjoxLCJhIjoxLCJ0IjoiZGFyayIsInRzIjoxNjg3NDgzNDg5MjE3fQ==
------WebKitFormBoundaryPXIjpA5uCgwszbBB--';
          $data = curl($url, $payload, $header1)[1];
          if (strpos($data, 'Just a moment...') ==! false){
              return "Cloudflare detected";}
          if (strpos($data, 'error') !== false) {
              $js = json_decode($data, true);
              $sec = $js["data"];
              $refresher=sleep(($sec/1000)+15);
                                                 }

          $showbypass = captchashow();
          $link = "https://earnbitmoon.club/system/libs/captcha/request.php?payload=eyJpIjoxLCJ0cyI6MTY4NzQ4MzQ5MDIzM30=";
          $data = curl($link, 0, $header2);

          $payload = base64_encode('{"i":1,"x":'.explode(",",$captcha)[0].',"y":'.explode(",",$captcha)[1].',"w":'.explode(",",$captcha)[2].',"a":2,"ts":'.round(microtime(true))*1000 .'}');
          $link = "https://earnbitmoon.club/system/libs/captcha/request.php";
          $request = '--------WebKitFormBoundaryPvNIrj9zw1N1kh5O
Content-Disposition: form-data; name="payload"


'.$payload.'
--------WebKitFormBoundaryPvNIrj9zw1N1kh5O--';
          $data = curl($link, $request, $header0)[0];
          // place stoppage;
          if (strpos($data, 'HTTP/2 200') !== false) { return "OK"; } else { return "Bad";}
}
function banner($name)
         { global $red ,$green ,$yellow ,$blue ,$purple ,$cyan ,$white ,$red ,$grey ,$mono ,$emono ,$italic ,$etalic ,$reset;
           echo "\n\rSIMPLE BOTS AND AUTO CLICKERS by 16(sixteen)";
           echo "\n\r$name AUTO FAUCET PYTHON-PHP SCRIPT";
}

function captcha()
         {
          $captcha[] = "17,13,320";
          $captcha[] = "113,23,320";
          $captcha[] = "142,37,320";
          $captcha[] = "220,30,320";
          $captcha[] = "296,19,320";
          $captcha[] = "278,33,314.824";
          return($captcha);
         }

function captchashow(){
         global $headers ,$red ,$green ,$yellow ,$blue ,$purple ,$cyan ,$white ,$red ,$grey ,$mono ,$emono ,$italic ,$etalic ,$reset;
         echo "Bypassing Captcha.                               \r";
         usleep(10000);
         echo "                                                 \r";}

function dailyreward($headers){
         global $red ,$green ,$yellow ,$blue ,$purple ,$cyan ,$white ,$red ,$grey ,$mono ,$emono ,$italic ,$etalic ,$reset;
         $data = curl("https://earnbitmoon.club/system/ajax.php?a=dailyBonus", 0, $headers)[1];
         $reward = explode('You successfully received ', explode(' Coins', $data)[0])[1];
         if(strpos($data, 'Coins') !== false){
            $x = date("H:i:s");
            $bdata = curl("https://earnbitmoon.club/", 0, $headers)[1];
            $balance = explode('</b></div></div>',explode('<div class="text-success"><b>',$bdata)[1])[0];

 echo "\r ". str_pad("$x ─ $balance ", 20, '   ', STR_PAD_RIGHT)
 // Adjust first column width
."    ". str_pad("+$reward Coins   ", 12, '   ', STR_PAD_RIGHT)
// Ensure reward column is aligned6
."  ". str_pad("  bonus", 6, ' ', STR_PAD_RIGHT)
// Keep last column aligned
. "\n";}}



main:
system("clear");

$url = "https://earnbitmoon.club/";
$host = "earnbitmoon.club";

function login($url, $host){
         global $cookie, $user;
         $headers = [
            "Host: earnbitmoon.club",
            "x-requested-with:XMLHttpRequest",
            "origin: https://earnbitmoon.club",
            "user-agent: $user",
            "accept: */*", //*/
            "referer: https://earnbitmoon.club/",
            "cookie: $cookie",
           ];
         $data = curl($url, 0, $headers)[1];
         if (strpos($data, 'Just a moment...') ==! false){
              echo "Cloudflare Detected. \nTry Using a Clean IP address\n";
              unlink('Cookie');
              exit;}
         $balance = explode('</b></div></div>',explode('<div class="text-success"><b>',$data)[1])[0];
         $balance2 = explode('<b id="sidebarCoins">',explode('</b></div></div>',$data)[0])[1];
         if ($balance==""){
              echo "Bad Input Data\n";
              unlink('Cookie');
              unlink('User-agent');
              exit;}
         banner("EARNBITMOON");
         echo slow("\n\nactive balance ".$balance." / ".$balance2."\n");
         echo str_repeat("—", 49)."\n";}





function ptc(){
         global $user;
         $url= "https://earnbitmoon.club/ptc.html";
         $cookie=cookie();
         $headers = [
                     "Host: earnbitmoon.club",
                     "x-requested-with:XMLHttpRequest",
                     "origin: https://earnbitmoon.club",
                     "user-agent: $user",
                     "accept: */*", //*/
                     "referer: https://earnbitmoon.club/",
                     "cookie: $cookie",
                    ];

         $data_ptc= curl($url, 0, $headers)[1];
         $sid0= explode('<button type="button" class="btn btn-success btn-sm w-100 mt-1" onclick="opensite(\'', explode('\');">', $data_ptc)[0])[1];
         $sid= explode("','", $sid0)[0];
         $end_url= explode("childWindow = open(base + '/surf.php?sid=' + a + '", explode("', b);", $data_ptc)[0])[1];

         $data_= curl("https://earnbitmoon.club/surf.php?sid=$sid$end_url", 0, $headers)[1];
         $var_token= explode("var token = '", explode("';", $data_)[0])[1];
         $seconds= explode("var secs = ", explode("var token =", $data_)[0])[1];
         $secs= explode(';',$seconds)[0];

         countdown($secs);

         foreach(captcha() as $captcha){
                 $res= captchasolver($captcha, $cookie);
                 if ($res == "OK"){
                     $payload= "a=proccessPTC&data=$sid&token=$var_token&ic-hf-id=1&ic-hf-se=$captcha&ic-hf-hp=";
                     $data= curl('https://earnbitmoon.club/system/ajax.php', $payload, $headers)[1];
                     $js = json_decode(strip_tags($data),true);
                     if($js["status"] == 200){
                           $reward= explode('You received ', explode(' Coins!<', $data)[0])[1];
                           $bdata= curl("https://earnbitmoon.club/", 0, $headers)[1];
                           $balance= explode('</b></div></div>',explode('<div class="text-success"><b>',$bdata)[1])[0];
                             $x= date("H:i:s");

 echo "\r ". str_pad("$x ─ $balance ", 20, '   ', STR_PAD_RIGHT)
 // Adjust first column width
."    ". str_pad("+$reward Coins   ", 12, '   ', STR_PAD_RIGHT)
// Ensure reward column is aligned
."  ". str_pad("ptc", 6, ' ', STR_PAD_RIGHT)
// Keep last column aligned
. "\n";dailyreward($headers);break;}}                                                         }





              }







function faucet($url, $host){
     global $user, $cookie;
     $headers = [
            "Host: earnbitmoon.club",
            "x-requested-with:XMLHttpRequest",
            "origin: https://earnbitmoon.club",
            "user-agent: $user",
            "accept: */*", //*/
            "referer: https://earnbitmoon.club/",
            "cookie: $cookie",
           ];
     dailyreward($headers);

     while (true){
         $data = curl($url, 0, $headers)[1];
         if (strpos($data, 'Just a moment...') ==! false){
            for ($i = 0; $i < 4; $i++) {
                 global $headers;
                 $data_check = curl($url, 0, $headers)[1];
                 sleep(3);
                 if (strpos($data_check, 'Claim FREE Coins every') ==! false){
                     break;}           }
                 system ("play loud_notification.mp3 -q vol 1");
                 echo "Cloudflare Detected!!! Enter (COOKIE): ";
                 shell_exec('stty -echo');
                 $cookie= trim(fgets(STDIN));
                 shell_exec('stty echo');
                 $headers= [        "Host: earnbitmoon.club",
                                    "x-requested-with:XMLHttpRequest",
                                    "origin: https://earnbitmoon.club",
                                    "user-agent: $user",
                                    "accept: */*", //*/
                                    "referer: https://earnbitmoon.club/",
                                     "cookie: $cookie",            ];
                 echo "\n".str_repeat("—", 49)."\n";
                 file_put_contents('Cookie',$cookie);
                 continue;}
         $millisec = explode('("#claimTime").countdown(', explode(", {elapse: true}", $data)[0])[1];
         if($millisec){countdown($millisec/1000-round(microtime(true))+rand(2,5));}
         $token = explode("'", explode("var token = '", $data)[1])[0];
         foreach(captcha() as $captcha){
                  $res= captchasolver($captcha, $cookie);
                  echo "\rCaptcha: $res    \r";
                  sleep(1);
                  if ($res == "OK"){
                        $capurl = "https://earnbitmoon.club/system/ajax.php";
                        $payload = "a=getFaucet&token=$token&captcha=3&challenge=false&response=false&ic-hf-id=1&ic-hf-se=$captcha&ic-hf-hp=";
                        $resdata = curl($capurl, $payload, $headers)[1];
                        $js = json_decode(strip_tags($resdata),true);
 
